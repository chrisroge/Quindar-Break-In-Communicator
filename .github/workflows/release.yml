name: Release Binaries

on:
  release:
    types: [created]
  workflow_dispatch:  # Allow manual triggering for testing

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: quindar_api
            asset_name: quindar-tone-api-linux-x86_64

          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            artifact_name: quindar_api
            asset_name: quindar-tone-api-linux-x86_64-musl

          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: quindar_api
            asset_name: quindar-tone-api-linux-aarch64

          # macOS builds
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: quindar_api
            asset_name: quindar-tone-api-macos-x86_64

          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: quindar_api
            asset_name: quindar-tone-api-macos-aarch64

          # Windows builds
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: quindar_api.exe
            asset_name: quindar-tone-api-windows-x86_64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install musl tools (Linux MUSL)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Install ALSA development libraries (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Strip binary (Unix)
        if: runner.os != 'Windows'
        run: |
          strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }} || true

      - name: Upload binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

      - name: Upload artifact for download
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
